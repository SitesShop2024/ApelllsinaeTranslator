import telebot
import threading
from deep_translator import GoogleTranslator, single_detection
from flask import Flask

app = Flask(__name__)

TOKEN = '8446885622:AAGp8wDzuLzAkq3hOALDK1v8TMvBmRG0plM'
bot = telebot.TeleBot(TOKEN)


LANGUAGES = GoogleTranslator().get_supported_languages(as_dict=True)
LANG_CODES = {v.lower(): k for k, v in LANGUAGES.items()}  # {'english': 'en', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en'}


user_langs = {}


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n\n"
                                      "üîÑ –ù–∞–ø–∏—à–∏ /setlang –∏ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å.\n"
                                      "üåê –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ!")


@bot.message_handler(commands=['setlang'])
def setlang(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–†—É—Å—Å–∫–∏–π", "English", "Deutsch", "Fran√ßais", "Espa√±ol", "Êó•Êú¨Ë™û", "“ö–∞–∑–∞“õ—à–∞")
    bot.send_message(message.chat.id, "üìù –ù–∞–ø–∏—à–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å.\n"
                                      "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `en`, `—Ä—É—Å—Å–∫–∏–π`)", reply_markup=markup)


@bot.message_handler(func=lambda m: True)
def translate_text(message):
    user_id = message.from_user.id
    target_lang = user_langs.get(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —ç—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞?
    possible_code = normalize_language_code(message.text)
    if possible_code:
        user_langs[user_id] = possible_code
        bot.send_message(message.chat.id, f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {LANGUAGES[possible_code].capitalize()}")
        return

    if not target_lang:
        bot.send_message(message.chat.id, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é /setlang")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    try:
        source_lang = single_detection(message.text, api="google")
    except Exception:
        source_lang = 'auto'

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º
    try:
        translated = GoogleTranslator(source=source_lang, target=target_lang).translate(message.text)
        bot.send_message(message.chat.id, f"üí¨ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")


def normalize_language_code(text):
    text = text.lower().strip()

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥ —è–∑—ã–∫–∞
    if text in LANGUAGES:
        return text

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ
    return LANG_CODES.get(text)


@app.route('/')
def home():
    return 'Bot working now!'


def run_flask():
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080)


def run_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()


def run_server():
    threading.Thread(target=run_bot).start()
    threading.Thread(target=run_flask).start()


threading.Thread(target=run_server).start()


